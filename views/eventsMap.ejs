<!doctype html>
<html lang="en">
<head>
    <!-- Required meta tags -->
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">

    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.6.3/css/all.css"
          integrity="sha384-UHRtZLI+pbxtHCWp1t77Bi1L4ZtiqrqD80Kn4Z8NTSRyMA2Fd33n5dQ8lWUE00s/" crossorigin="anonymous">
    <link
            rel="stylesheet"
            href="https://bootswatch.com/4/journal/bootstrap.min.css"
    />
    <!-- Bootstrap CSS -->
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css"
          integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">

    <script src="https://code.jquery.com/jquery-3.3.1.min.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css"
          integrity="sha384-Gn5384xqQ1aoWXA+058RXPxPg6fy4IWvTNh0E263XmFcJlSAwiGgFAW/dAiS6JXm" crossorigin="anonymous">
    <script src="https://unpkg.com/gijgo@1.9.11/js/gijgo.min.js" type="text/javascript"></script>
    <link href="https://unpkg.com/gijgo@1.9.11/css/gijgo.min.css" rel="stylesheet" type="text/css"/>
    <link href="https://maxcdn.bootstrapcdn.com/font-awesome/4.7.0/css/font-awesome.min.css" rel="stylesheet">
    <link rel='stylesheet' href='/stylesheets/style.css'/>

    <title>Events Map</title>
    <style>
        /* Always set the map height explicitly to define the size of the div
         * element that contains the map. */
        #map {
            height: 500px;
        }
        /* Optional: Makes the sample page fill the window. */
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
        }
        #description {
            font-family: Roboto;
            font-size: 15px;
            font-weight: 300;
        }
        #infowindow-content .title {
            font-weight: bold;
        }
        #infowindow-content {
            display: none;
        }
        #map #infowindow-content {
            display: inline;
        }
        .pac-card {
            margin: 10px 10px 0 0;
            border-radius: 2px 0 0 2px;
            box-sizing: border-box;
            -moz-box-sizing: border-box;
            outline: none;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
            background-color: #fff;
            font-family: Roboto;
        }
        #pac-container {
            padding-bottom: 12px;
            margin-right: 12px;
        }
        .pac-controls {
            display: inline-block;
            padding: 5px 11px;
        }
        .pac-controls label {
            font-family: Roboto;
            font-size: 13px;
            font-weight: 300;
        }
        #pac-input {
            background-color: #fff;
            font-family: Roboto;
            font-size: 15px;
            font-weight: 300;
            margin-left: 12px;
            padding: 0 11px 0 13px;
            text-overflow: ellipsis;
            width: 400px;
        }
        #pac-input:focus {
            border-color: #4d90fe;
        }
        #title {
            color: #fff;
            background-color: #4d90fe;
            font-size: 25px;
            font-weight: 500;
            padding: 6px 12px;
        }
        #target {
            width: 345px;
        }
    </style>

</head>
<nav class="navbar navbar-expand-sm bg-dark navbar-dark sticky-top">
    <a class="navbar-brand" href="/">Festival Events</a>
    <button class="navbar-toggler navbar-toggler-right" type="button" data-toggle="collapse" data-target="#navb"
            aria-expanded="true">
        <span class="navbar-toggler-icon"></span>
    </button>
    <div id="navb" class="navbar-collapse collapse hide">
        <ul class="navbar-nav">
            <li class="nav-item">
                <a href="/" class="btn btn-info btn-md">
                    <span class="fa fa-home"></span> Home
                </a>
            </li>
            <li class="nav-item active">
                <a class="nav-link" href="/eventsMap">Events Map</a>
                <% if (login) { %>
            <li class="nav-item">
                <a class="nav-link" href="/MyEvents">My Events</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" href="/MyStories">My Stories</a>
            </li>
            <% } %>
        </ul>

        <ul class="nav navbar-nav ml-auto">
            <% if (login) { %>
                <li class="nav-item">
                    <a class="nav-link" href="/users/logout"><span class="fa fa-user"></span> Logout</a>
                </li>
            <% } else { %>
                <li class="nav-item">
                    <a class="nav-link" href="/users/register"><span class="fa fa-pencil"></span> Sign Up</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="/users/login"><span class="fa fa-user"></span> Login</a>
                </li>
            <% } %>
        </ul>
    </div>
</nav>
<body>

<!-- includes for modal files -->
<% include modals/login.ejs %>
<% include modals/register.ejs %>
<% include modals/editEvent.ejs %>
<% include modals/editStory.ejs %>
<% include modals/eventDelete.ejs %>
<% include modals/storyDelete.ejs %>
<% include partials/messages %>

<div class="container">
    <div class="row">
        <h1>Events Map</h1>
    </div>
</div>

<div class="container">
    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
    <div id="map" style="width:95%;align:center;"></div>
</div>

<script>
    // This is an example of getting the user's current co-ordinates
    var x = document.getElementById("demo");
    function getLocation() {
        if (navigator.geolocation) {
            navigator.geolocation.getCurrentPosition(showPosition, showError);
        } else {
            x.innerHTML = "Geolocation is not supported by this browser.";
        }
    }
    function showPosition(position) {
        x.innerHTML = "Latitude: " + position.coords.latitude +
            "<br>Longitude: " + position.coords.longitude;
    }
    function showError(error) {
        switch (error.code) {
            case error.PERMISSION_DENIED:
                x.innerHTML = "User denied the request for Geolocation.";
                break;
            case error.POSITION_UNAVAILABLE:
                x.innerHTML = "Location information is unavailable.";
                break;
            case error.TIMEOUT:
                x.innerHTML = "The request to get user location timed out.";
                break;
            case error.UNKNOWN_ERROR:
                x.innerHTML = "An unknown error occurred.";
                break;
        }
    }
</script>

<script>
    // This example adds a search box to a map, using the Google Place Autocomplete
    // feature. People can enter geographical searches. The search box will return a
    // pick list containing a mix of places and predicted search terms.
    // This example requires the Places library. Include the libraries=places
    // parameter when you first load the API. For example:
    // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
    function initAutocomplete() {
        var myLatlng = new google.maps.LatLng(53.38108855193859, -1.4801287651062012);
        var map = new google.maps.Map(document.getElementById('map'), {
            center: myLatlng,
            zoom: 14,
            mapTypeId: 'roadmap'
        });
        //for each story creates a map marker
        <% stories.forEach(function (story) { %>
        //sets the infowindow contents
        var contentString = '<div id="content">' +
            '<h3 id="firstHeading" class="firstHeading"><%= story.storyname %></h3>' +
            '<div id="bodyContent">' +
            '<p><%= story.description %> </p>' +
            '<p><%= "Posted on: " + story.dateposted %></p>' +
            '<p><%= "Posted by: " + story.firstname + " at " + story.surname %></p>' +
            '</div>' +
            '</div>';
        var markerLatlng = new google.maps.LatLng("<%= story.longitude %>", "<%= story.latitude %>");
        //plots the map marker for each story using its latitude and longitude
        var image = 'https://developers.google.com/maps/documentation/javascript/examples/full/images/beachflag.png';
        var marker = new google.maps.Marker({
            position: markerLatlng,
            map: map,
            content: contentString,
            title: "Here!!",
            icon: image
        });
        //adds an infowindow for each story
        google.maps.event.addListener(marker, 'click', function () {
            new google.maps.InfoWindow({
                content: this.content,
                maxWidth: 350
            }).open(map, this);
        });
        <% }) %>

        //plots a map marker and infowindow for each event
        <% events.forEach(function (event) { %>
        var myLat = "";
        var myLng = "";
        var address = "<%= event.location + " " + event.city + " " + event.postcode %>";
        var geocoder = new google.maps.Geocoder();
        //gecodoes the address details to get a latitude and longitude co-ordiante
        geocoder.geocode({'address': address}, function (results, status) {
            if (status == google.maps.GeocoderStatus.OK) {
                var latitude = results[0].geometry.location.lat();
                var longitude = results[0].geometry.location.lng();
                //sets the infowindow contents
                var contentString = '<div id="content">' +
                    '<h3 id="firstHeading" class="firstHeading"><%= event.eventname %></h3>' +
                    '<div id="bodyContent">' +
                    '<p><%= event.description %> </p>' +
                    '<p><%= "Event Date: " + event.startdate + " ~ " + event.enddate %></p>' +
                    '<p><%= "Location:" + event.location + " " + event.city + " " + event.postcode %> </p>' +
                    '<p><%= "Posted by: " + event.firstname + " " + event.surname %></p>' +
                    '</div>' +
                    '</div>';
                var markerLatlng = new google.maps.LatLng(latitude, longitude);
                //plots the map marker for the event
                var marker = new google.maps.Marker({
                    position: markerLatlng,
                    map: map,
                    content: contentString,
                    title: "Here!!"
                });
                //adds an infowindow for each event map marker
                google.maps.event.addListener(marker, 'click', function () {
                    new google.maps.InfoWindow({
                        content: this.content,
                        maxWidth: 350
                    }).open(map, this);
                });
            }
        });
        <% }) %>

        // Create the search box and link it to the UI element.
        var input = document.getElementById('pac-input');
        var searchBox = new google.maps.places.SearchBox(input);
        map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
        // Bias the SearchBox results towards current map's viewport.
        map.addListener('bounds_changed', function () {
            searchBox.setBounds(map.getBounds());
        });
        var markers = [];

        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBox.addListener('places_changed', function () {
            var places = searchBox.getPlaces();
            if (places.length == 0) {
                return;
            }
            // Clear out the old markers.
            markers.forEach(function (marker) {
                marker.setMap(null);
            });
            markers = [];
            // For each place, get the icon, name and location.
            var bounds = new google.maps.LatLngBounds();
            places.forEach(function (place) {
                if (!place.geometry) {
                    console.log("Returned place contains no geometry");
                    return;
                }
                var icon = {
                    url: place.icon,
                    size: new google.maps.Size(71, 71),
                    origin: new google.maps.Point(0, 0),
                    anchor: new google.maps.Point(17, 34),
                    scaledSize: new google.maps.Size(25, 25)
                };
                // Create a marker for each place.
                markers.push(new google.maps.Marker({
                    map: map,
                    icon: icon,
                    title: place.name,
                    position: place.geometry.location
                }));
                if (place.geometry.viewport) {
                    // Only geocodes have viewport.
                    bounds.union(place.geometry.viewport);
                } else {
                    bounds.extend(place.geometry.location);
                }
            });
            map.fitBounds(bounds);
        });
    }
</script>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCeBByRlQEmsAQNvGmY_EAywBr1p0kiX28&libraries=places&callback=initAutocomplete"
        async defer></script>

<!-- Optional JavaScript -->
<!-- jQuery first, then Popper.js, then Bootstrap JS -->
<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js"
        integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo"
        crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js"
        integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1"
        crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js"
        integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM"
        crossorigin="anonymous"></script>
<script src="/scripts/idb.js"></script>
<script src="/scripts/index.js"></script>

</body>
</html>